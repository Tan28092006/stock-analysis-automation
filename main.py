import os
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import glob
from docx import Document
from groq import Groq
import yagmail

# ==== Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng ====
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not GROQ_API_KEY:
    raise Exception("B·∫°n ch∆∞a set bi·∫øn m√¥i tr∆∞·ªùng GROQ_API_KEY")

client = Groq(api_key=GROQ_API_KEY)

# ==== C√°c h√†m t√≠nh ch·ªâ b√°o ====
def EMA(series, period):
    return series.ewm(span=period, adjust=False).mean()

def SMA(series, period):
    return series.rolling(window=period).mean()

def MACD(series, fast=12, slow=26, signal=9):
    ema_fast = EMA(series, fast)
    ema_slow = EMA(series, slow)
    macd = ema_fast - ema_slow
    signal_line = EMA(macd, signal)
    hist = macd - signal_line
    return macd, signal_line, hist

def RSI(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def BollingerBands(series, period=20, num_std=2):
    mid = SMA(series, period)
    std = series.rolling(window=period).std()
    upper = mid + num_std * std
    lower = mid - num_std * std
    return upper, mid, lower

def AO(high, low, short=5, long=34):
    median_price = (high + low) / 2
    return SMA(median_price, short) - SMA(median_price, long)

# ==== Th∆∞ m·ª•c l∆∞u file ====
save_path = "outputs"
os.makedirs(save_path, exist_ok=True)

# ==== Danh s√°ch VN30 ====
vn30_tickers = [
    "ACB", "BCM", "BID", "BVH", "CTG", "FPT", "GAS", "GVR", "HDB", "HPG",
    "KDH", "MBB", "MSN", "MWG", "NVL", "PDR", "PLX", "POW", "SAB", "SHB",
    "SSI", "STB", "TCB", "TPB", "VCB", "VHM", "VIB", "VIC", "VJC", "VNM"
]

# ==== B∆∞·ªõc 1: L·ªçc top tƒÉng tr∆∞·ªüng 14 ng√†y ====
growth_data = []
two_weeks_ago = datetime.today() - timedelta(days=14)

for ticker in vn30_tickers:
    df_temp = yf.download(ticker + ".VN", start=two_weeks_ago, end=datetime.today())
    if df_temp.empty:
        continue
    start_price = df_temp["Close"].iloc[0]
    end_price = df_temp["Close"].iloc[-1]
    growth_pct = (end_price / start_price - 1) * 100
    growth_data.append((ticker, growth_pct))

growth_data.sort(key=lambda x: x[1], reverse=True)
top_tickers = [x[0] for x in growth_data[:5]]

print("üìà Top 5 VN30 tƒÉng tr∆∞·ªüng 14 ng√†y:", top_tickers)

# ==== B∆∞·ªõc 2: Ph√¢n t√≠ch v·ªõi d·ªØ li·ªáu 28 ng√†y ====
end_date = datetime.today()
start_date = end_date - timedelta(days=28)

for ticker in top_tickers:
    df = yf.download(ticker + ".VN", start=start_date, end=end_date)
    df["Close"] = df["Close"].squeeze()

    df["EMA20"] = EMA(df["Close"], 20)
    df["EMA50"] = EMA(df["Close"], 50)
    df["EMA100"] = EMA(df["Close"], 100)
    macd, signal, hist = MACD(df["Close"])
    df["MACD"] = macd
    df["Signal"] = signal
    df["MACD_Hist"] = hist
    df["RSI"] = RSI(df["Close"])
    upper, mid, lower = BollingerBands(df["Close"])
    df["BB_Upper"] = upper
    df["BB_Mid"] = mid
    df["BB_Lower"] = lower
    df["AO"] = AO(df["High"], df["Low"])

    vol_mean = df["Volume"].rolling(window=20).mean()
    df["Breakout"] = df["Volume"] > vol_mean * 1.5

    df_reset = df.reset_index()
    df_reset["Date"] = df_reset["Date"].dt.strftime("%Y-%m-%d")
    df_reset.columns = [str(col) if isinstance(col, tuple) else col for col in df_reset.columns]
    df_json_ready = df_reset.where(pd.notnull(df_reset), None)

    file_json = os.path.join(save_path, f"{ticker}.json")
    with open(file_json, "w") as f:
        json.dump(df_json_ready.to_dict(orient="records"), f, indent=2)

print("‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu JSON v√†o th∆∞ m·ª•c outputs!")

# ==== H√†m g·ªçi API Groq ====
def analyze_data_with_groq(json_data):
    prompt = (
        "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch k·ªπ thu·∫≠t ch·ª©ng kho√°n top 0,1%.\n"
        "D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu k·ªπ thu·∫≠t c·ªßa c·ªï phi·∫øu (28 ng√†y g·∫ßn nh·∫•t), "
        "h√£y ph√¢n t√≠ch, nh·∫≠n ƒë·ªãnh xu h∆∞·ªõng, ƒëi·ªÉm mua/b√°n, c·∫£nh b√°o breakout, v√† ch·ªâ s·ª≠ d·ª•ng ƒëo·∫°n vƒÉn b·∫£n kh√¥ng d√πng b·∫£ng khi tr·∫£ l·ªùi "
        "v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ng·∫Øn g·ªçn.\n\n"
        f"D·ªØ li·ªáu: {json_data}\n\n"
        "Ph√¢n t√≠ch chi ti·∫øt:"
    )
    completion = client.chat.completions.create(
        model="openai/gpt-oss-120b",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_completion_tokens=3000,
        top_p=1,
        reasoning_effort="medium",
        stream=False,
        stop=None
    )
    return completion.choices[0].message.content

# ==== Ph√¢n t√≠ch t·ª´ng file JSON ====
json_files = glob.glob(os.path.join(save_path, "*.json"))
report_text = "B√°o c√°o ph√¢n t√≠ch k·ªπ thu·∫≠t ch·ª©ng kho√°n t·ª± ƒë·ªông:\n\n"

for file_path in json_files:
    with open(file_path, "r") as f:
        data_json = f.read()

    ticker_name = os.path.basename(file_path).replace(".json", "")
    print(f"ƒêang ph√¢n t√≠ch {ticker_name} ...")

    try:
        analysis_text = analyze_data_with_groq(data_json)
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi API ph√¢n t√≠ch {ticker_name}: {e}")
        analysis_text = "Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch do l·ªói API."

    report_text += f"--- Ph√¢n t√≠ch {ticker_name} ---\n{analysis_text}\n\n"

    os.remove(file_path)
    print(f"ƒê√£ x√≥a file {file_path}")

# ==== T·∫°o file b√°o c√°o ====
doc = Document()
doc.add_heading("B√°o c√°o Ph√¢n t√≠ch Ch·ªâ b√°o K·ªπ thu·∫≠t C·ªï phi·∫øu", level=1)

for line in report_text.strip().split('\n'):
    doc.add_paragraph(line)

report_path = os.path.join(save_path, "Bao_cao_phan_tich_co_phieu.docx")
doc.save(report_path)

def send_email_report(receiver_email, subject, content, attachment_path):
    sender_email = os.getenv("EMAIL_USER")
    sender_password = os.getenv("EMAIL_PASS")
    if not sender_email or not sender_password:
        raise Exception("Ch∆∞a set EMAIL_USER v√† EMAIL_PASS trong secrets")
    yag = yagmail.SMTP(user=sender_email, password=sender_password)
    yag.send(to=receiver_email, subject=subject, contents=content, attachments=attachment_path)
    print(f"üìß ƒê√£ g·ª≠i b√°o c√°o t·ªõi {receiver_email}")

print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o ph√¢n t√≠ch v√†o file {report_path}")

# ==== G·ª≠i email ====
try:
    send_email_report(
        receiver_email="vanheminhtan@gmail.com",
        subject="B√°o c√°o ph√¢n t√≠ch ch·ª©ng kho√°n t·ª± ƒë·ªông",
        content=report_text,
        attachment_path=report_path
    )
except Exception as e:
    print(f"‚ùå L·ªói g·ª≠i email: {e}")
